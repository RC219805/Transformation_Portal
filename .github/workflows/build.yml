# .github/workflows/build.yml
name: CI (Lint, Tests & Manifest)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        python-version: [ "3.10", "3.11", "3.12" ]
        task: [lint, test]
        device: [cpu, gpu]  # Added device selection
        exclude:
          # Lint doesn't need to run on both CPU and GPU
          - task: lint
            device: gpu

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0  # Fetch all history so git diff can compare with base branch

      # Setup Python for matrix
      - uses: actions/setup-python@v6
        with:
          python-version: ${{ matrix.python-version }}

      # Upgrade pip
      - name: Upgrade pip
        run: python -m pip install --upgrade pip

      # Cache pip packages
      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('requirements-ci.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-

      # Lint job
      - name: Flake8 + Pylint
        if: matrix.task == 'lint'
        run: |
          pip install --no-cache-dir flake8 pylint
          echo "Running flake8..."
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          echo "Running pylint..."
          files=$(git diff --name-only origin/main...HEAD | grep '\.py$' | grep -v -e '/deprecated/' -e 'src/transformation_portal/' -e 'scripts/' || echo "")
          
          # Run pylint and capture exit code (set +e to prevent immediate exit)
          set +e
          if [ -z "$files" ]; then
            pylint $(git ls-files '*.py' | grep -v -e '/deprecated/' -e 'src/transformation_portal/' -e 'scripts/')
            PYLINT_EXIT=$?
          else
            pylint $files
            PYLINT_EXIT=$?
          fi
          set -e
          
          # Pylint exit codes are bitwise flags: 1=fatal, 2=error, 4=warning, 8=refactor, 16=convention, 32=usage error
          # Exit codes can be combined (e.g., 6 = 2+4 means both error and warning)
          # Only fail on fatal (1), error (2), or usage error (32)
          # Use bitwise AND to check for specific flags: (exit_code & flag) != 0
          if [ $((PYLINT_EXIT & 3)) -ne 0 ] || [ $((PYLINT_EXIT & 32)) -ne 0 ]; then
            echo "Pylint found critical issues (exit code: $PYLINT_EXIT)"
            exit 1
          elif [ $PYLINT_EXIT -ne 0 ]; then
            echo "Pylint found warnings/suggestions (exit code: $PYLINT_EXIT), but no critical errors"
            exit 0
          else
            echo "Pylint found no issues"
          fi

      # Test job
      - name: Free disk space
        if: matrix.task == 'test'
        run: |
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /opt/hostedtoolcache/CodeQL || true
          df -h

      - name: Install dependencies
        if: matrix.task == 'test'
        env:
          PIP_NO_CACHE_DIR: "1"
        run: |
          pip install --upgrade pip
          if [ "${{ matrix.device }}" = "gpu" ]; then
            echo "Installing PyTorch GPU packages..."
            pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121
          else
            echo "Installing PyTorch CPU-only packages..."
            pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu
          fi
          pip install -r requirements-ci.txt
          pip install -e .
          pip install pytest
          # Workaround for numpy/scikit-learn ABI incompatibility:
          # Recent versions of numpy (>=1.26) and scikit-learn (<1.4) can result in
          # runtime ImportError due to ABI mismatch, especially when other dependencies
          # (e.g., pandas, scipy) are installed first and may pull in conflicting wheels.
          # See: https://github.com/scikit-learn/scikit-learn/issues/25896
          #      https://github.com/numpy/numpy/issues/25605
          # This step force-reinstalls scikit-learn after all other dependencies to ensure
          # it is built/linked against the correct numpy version. Remove this workaround
          # once all dependencies are compatible with scikit-learn >=1.4 or the upstream
          # issues are resolved.
          # Extract scikit-learn version constraint from requirements-ci.txt and reinstall
          SKLEARN_CONSTRAINT=$(grep -E '^scikit-learn[^#]*' requirements-ci.txt | head -n1)
          if [ -n "$SKLEARN_CONSTRAINT" ]; then
            pip install --no-cache-dir --force-reinstall "$SKLEARN_CONSTRAINT"
          else
            echo "scikit-learn constraint not found in requirements-ci.txt" >&2
            exit 1
          fi

      - name: Run tests
        if: matrix.task == 'test'
        run: pytest -v tests/

  generate-manifest:
    name: Build Montecito Manifest
    needs: [lint-and-test]
    runs-on: ubuntu-24.04

    steps:
      - uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Upgrade pip & install deps
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements-ci.txt

      - name: Run Montecito Manifest Tool
        id: manifest
        shell: bash
        run: |
          set -euo pipefail
          OUT="montecito_manifest.csv"

          # Generate manifest for the repository root
          python tools/montecito_manifest.py . "$OUT"

          # Verify the manifest was created
          if [ ! -f "$OUT" ]; then
            echo "Error: Manifest file was not created at $OUT"
            exit 1
          fi

          echo "manifest_path=$OUT" >> "$GITHUB_OUTPUT"

      - name: Upload manifest artifact
        if: ${{ steps.manifest.outputs.manifest_path != '' }}
        uses: actions/upload-artifact@v5
        with:
          name: montecito-manifest
          path: ${{ steps.manifest.outputs.manifest_path }}
          if-no-files-found: error
